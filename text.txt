#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

class Employee {
public:
    std::string name;
    double hourlyRate;
    double hoursWorked;

    Employee(std::string n, double rate) : name(n), hourlyRate(rate), hoursWorked(0) {}

    double calculateSalary() const {
        return hourlyRate * hoursWorked;
    }
};

int main() {
    std::vector<Employee> employees;
    employees.push_back(Employee("John Doe", 20.0));
    employees.push_back(Employee("Jane Smith", 25.0));
    employees.push_back(Employee("Alice Johnson", 18.5));

    while (true) {
        std::cout << "Menu:\n1. Add Employee\n2. Record Hours Worked\n3. Calculate Salaries\n4. Exit\n";
        std::cout << "Enter your choice: ";
        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::string name;
                double hourlyRate;
                std::cout << "Enter employee name: ";
                std::cin >> name;
                std::cout << "Enter hourly rate: ";
                std::cin >> hourlyRate;
                employees.push_back(Employee(name, hourlyRate));
                std::cout << "Employee added successfully!" << std::endl;
                break;
            }

            case 2: {
                std::string employeeName;
                double hoursWorked;
                std::cout << "Enter employee name: ";
                std::cin >> employeeName;
                auto it = std::find_if(employees.begin(), employees.end(),
                                       [&employeeName](const Employee &emp) {
                                           return emp.name == employeeName;
                                       });
                if (it != employees.end()) {
                    std::cout << "Enter hours worked: ";
                    std::cin >> hoursWorked;
                    it->hoursWorked += hoursWorked;
                    std::cout << "Hours recorded successfully!" << std::endl;
                } else {
                    std::cout << "Employee not found." << std::endl;
                }
                break;
            }

            case 3: {
                std::cout << "Salary Calculation:" << std::endl;
                for (const Employee &employee : employees) {
                    std::cout << "Name: " << employee.name << "\nSalary: $" << employee.calculateSalary() << std::endl;
                    std::cout << "----------------" << std::endl;
                }
                break;
            }

            case 4:
                std::cout << "Exiting the program." << std::endl;
                return 0;

            default:
                std::cout << "Invalid choice. Please select again." << std::endl;
        }
    }

    return 0;
}